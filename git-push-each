#!/usr/bin/env rust-script
//! ```cargo
//! [dependencies]
//! clap = { version = "4.5.48", features = ["derive"] }
//! thiserror = "2.0.17"
//! ```
//!
//! Push commits individually to trigger CI builds for each

use clap::Parser;
use std::process::{Command, Stdio, exit};
use std::str::FromStr;
use thiserror::Error;

const EXIT_OK: i32 = 0;
const EXIT_DATAERR: i32 = 65; // bad input / not found
const EXIT_SOFTWARE: i32 = 70; // unexpected internal failure

#[derive(Debug, Error)]
enum ValidationError {
    #[error("Git reference cannot be empty")]
    GitRefEmpty,

    #[error("Failed to execute git rev-parse")]
    GitRevParseFailed,

    #[error("Git reference not found: {ref_name}")]
    GitRefNotFound { ref_name: String },
}

#[derive(Debug, Clone)]
struct GitRef(String);

impl FromStr for GitRef {
    type Err = ValidationError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        if s.is_empty() {
            return Err(ValidationError::GitRefEmpty);
        }

        // Validate that the ref exists using git rev-parse
        let output = Command::new("git")
            .args(&["rev-parse", "--verify", &format!("{}^{{commit}}", s)])
            .output()
            .map_err(|_| ValidationError::GitRevParseFailed)?;

        if !output.status.success() {
            return Err(ValidationError::GitRefNotFound {
                ref_name: s.to_string(),
            });
        }

        // Store the resolved SHA
        let sha = String::from_utf8_lossy(&output.stdout).trim().to_string();
        Ok(GitRef(sha))
    }
}

impl GitRef {
    fn as_str(&self) -> &str {
        &self.0
    }
}

#[derive(Parser, Debug)]
#[command(name = "git-push-each")]
#[command(about = "Push commits individually to trigger CI builds for each", long_about = None)]
struct Args {
    /// Set upstream for the branch
    #[arg(long)]
    set_upstream: bool,

    /// Parent branch
    parent: Option<GitRef>,
}

fn main() {
    let args = Args::parse();

    // Check we're in a git repository
    let repo_check = Command::new("git")
        .args(&["rev-parse", "--git-dir"])
        .stdout(Stdio::null())
        .stderr(Stdio::null())
        .status()
        .expect("Failed to execute git rev-parse");

    if !repo_check.success() {
        eprintln!("✗ ERROR: Not a git repository (or any of the parent directories).");
        eprintln!("NEXT: cd into a repo, or run: git init");
        exit(EXIT_DATAERR);
    }

    // Get parent branch - use default if not provided
    let parent = if let Some(p) = args.parent {
        p
    } else {
        let default_branch = git_output(&["config", "init.defaultBranch"]);
        match GitRef::from_str(&default_branch) {
            Ok(git_ref) => git_ref,
            Err(e) => {
                eprintln!("✗ ERROR: {}", e);
                exit(EXIT_DATAERR);
            }
        }
    };

    // Get current branch
    let branch = git_output(&["rev-parse", "--abbrev-ref", "HEAD"]);

    // Get remote for current branch
    let remote = git_output(&["config", &format!("branch.{}.remote", branch)]);

    // Get commits in the local branch not in upstream
    let commits_output = git_output(&[
        "rev-list",
        "HEAD",
        &format!("^{}/{}", remote, branch),
        &format!("^{}/{}", remote, parent.as_str()),
        "--reverse",
    ]);

    let commits: Vec<&str> = commits_output.lines().collect();

    if commits.is_empty() {
        println!("✓ No commits to push");
        exit(EXIT_OK);
    }

    println!("→ Pushing {} commits individually", commits.len());

    // Push all commits not upstream
    for (i, commit) in commits.iter().enumerate() {
        println!("  [{}/{}] Pushing {}", i + 1, commits.len(), commit);

        let mut cmd = Command::new("git");
        cmd.arg("push");

        // Add --set-upstream only on first commit if requested
        if i == 0 && args.set_upstream {
            cmd.arg("--set-upstream");
        }

        cmd.arg("--force-with-lease");
        cmd.arg("--")
            .arg(&remote)
            .arg(&format!("{}:{}", commit, branch));

        let status = cmd.status();

        match status {
            Ok(s) if s.success() => {}
            Ok(_) => {
                eprintln!("✗ ERROR: Failed to push commit {}", commit);
                exit(EXIT_SOFTWARE);
            }
            Err(e) => {
                eprintln!("✗ ERROR: Failed to execute git push");
                eprintln!("DETAILS: {}", e);
                exit(EXIT_SOFTWARE);
            }
        }
    }

    println!("✓ All commits pushed successfully");
    exit(EXIT_OK);
}

fn git_output(args: &[&str]) -> String {
    let output = match Command::new("git").args(args).output() {
        Ok(output) => output,
        Err(e) => {
            eprintln!("✗ ERROR: Failed to execute git {}", args.join(" "));
            eprintln!("DETAILS: {}", e);
            exit(EXIT_SOFTWARE);
        }
    };

    if !output.status.success() {
        eprintln!("✗ ERROR: git {} failed", args.join(" "));
        let stderr = String::from_utf8_lossy(&output.stderr);
        let trimmed = stderr.trim();
        if !trimmed.is_empty() {
            eprintln!("{}", trimmed);
        }
        exit(EXIT_SOFTWARE);
    }

    String::from_utf8_lossy(&output.stdout).trim().to_string()
}
